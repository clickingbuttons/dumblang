// Coerces to u8
pub enum Fruit {
	banana,
	strawberry,
	kiwi,
	_, // means accepts any other value

	test {
		assert Fruit(4) == 4
	}
};

// Throws when initialized with non-int type
pub enum FruitExhaustive {
	banana,
	strawberry,
	kiwi,

	test {
		assert FruitExhaustive.Int == u8
		assert banana == 0

		assert FruitExhaustive(3) == .Unenumerated
	}
};


// Class members are laid out according to C's struct ABI.
pub class Rect {
	width: u8,
	height: u8,

	// By default a `this` member is available.
	fn area() u8 => this.width * this.height

	fn grow2(amount: u8) {
		this.width += amount;
		this.height += amount;
	}
};

class RectangularPrism extends Rect {
	// ...Rect, // this syntax would only inherit fields, not decls
	depth: u8,

	// overrides allowed
	fn area() u8 => Rect.area(self) * self.depth,

	test {
		cube = RectangularPrism{ .width = 1, .height = 2, .depth = 3 }
		assert cube.area() == 8
		cube.grow2(1);
		assert cube.area() == 18
	}
};

test tuples {
	tuple = .{ "member1", 2, Fruit.kiwi }
	assert tuple[0] == "member1"
	assert tuple[1] == 2
	assert tuple[3] == Fruit.kiwi
}

class Flags extends u16 {
	// Layout is big endian. May be converted to/from int type.
	// value: 0000_0000_0000_0000
	// field: 1223_3333_3444_4444
	f1: bool,
	// Integer types are permitted to have bit widths besides 8, 16, 32, and 64.
	f2: enum(u2) { on, off, indeterminate },
	f3: u6,
	f4: u7,

	test {
		flags = Flags{ .f1 = true, .f2 = .indeterminate, .f3 = u6.max, .f4 = 0 }
		assert flags == 0b1111_1111_1000_0000
	}
};

// Memory layout: struct {
//   tag: enum,
//   value: max_type_size
// }
union Tagged {
	small: i8,
	big: f32,

	test {
		tagged = TaggedUnion.small(3)
		expect @tag(tagged) == .small
		expect tagged == 3
	}
};
