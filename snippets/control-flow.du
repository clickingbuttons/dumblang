import { Fruit, FruitExhaustive } from "./containers.du"
import { ArrayList } from "std";

test switch {
	val = Fruit.kiwi
	color: []const u8 = switch (val) {
		.banana => "yellow",
		.strawberry => "red",
		.kiwi => "green",
	}
	expect color == "green"

	val = Fruit(9)
	color = switch (val) {
		.banana => "yellow",
		.strawberry => "red",
		.kiwi => "green",
		_ => "unknown"
	}
	expect color == "unknown"
}

test if {
	// statements are expressions
	a = if (1) true else false
	assert a == true

	a: u8 = if (?u8(32)) |o| o else 3
	assert a == 32

	// doesn't require parentheses if has brackets
	if 1 {
		assert true
	}
}

test for {
	msg = "0123"

	sum: u64 = 0
	for 0..5 |n| sum += n * 2
	assert sum == 20

	// Can iterate over slices or sentinel terminated arrays.
	// The optionally captured `i` is the type used to iterate over `msg`.
	for (msg) |c: u8, i: usize| assert c == msg[i]
}

enum Error { broken }

fn always_errors() i32!Error => Error.broken
fn always_errors2() i32!Error => always_errors()!

test catch {
	always_errors() |e| assert e == Error.broken
	always_errors2() |e| assert e == Error.broken
}

test defer {
	list = ArrayList(u8)
	{
		defer list.push(1)
		defer list.push(2)
		defer list.push(3)
	}
	assert list.items == u8[3, 2, 1]
}
