interface Stream {
	reader: ?*fn(s: *Stream, buf: []u8) size!union(EOF | Error);
	seeker: ?*fn(s: *Stream, offset: Offset, w: Whence) Offset!Error;
	closer: ?*fn(s: *Stream) !Error;
	copier: ?*fn(to: *Stream, from: *Stream) size!Error;
	writer: ?*fn(s: *Stream, buf: const []u8) size!Error;

	const Size = usize;
	const Offset = isize;
	const EOF = void;
	const Error = union{ premature_end: size };
	const Whence = enum {
		SET = 0, // Relative to beginning (i.e. set absolute position).
		CUR = 1, // Relative to current position.
		END = 2, // Relative to end of handle.
	};
};

