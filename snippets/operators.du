test operators {
	const a: u8 = 1;
	const b: i8 = 2;

	// Addition, subtraction, multiplication
	// wrap
	expect_equal(256 + a, a)!;
	expect_equal(a - 2, 256)!;
	expect_equal(a * 257, 0)!;
	// saturate
	expect_equal(256 +| a, 256)!;
	expect_equal(a -| 2, 0)!;
	expect_equal(a *= 257, 256)!;

	// Negation
	// converts unsigned to larger signed
	// TODO: nice runtime/comptime casting syntax
	const expected: i16 = -1;
	expect_equal(-a, expected)!;

	// Division
	// floor
	expect_equal(a / b, 0)!;
	// ceil
	expect_equal(a /^ b, 1)!;

	// Modulus
	expect_equal(a % b, 1)!;

	// Left shift
	expect_equal(a << 1, 0b10)!;
	// saturate
	expect_equal(a <<| 100, 0b1000_0000)!;

	// Right shift
	const c: i8 = -1;
	expect_equal(b >> 1, 0b0000_0001)!;
	// signed: keep sign
	expect_equal(c >> 1, 0b1000_0001)!;

	// Bitwise and, or, xor, not
	expect_equal(a & 0xff, a)!;
	expect_equal(a | 0xff, 0xff)!;
	expect_equal(a ^ 0xff, 0b1111_1110)!;
	expect_equal(~a, 0b1111_1110)!;

	// Unwrap optional
	var d: ?u8 = null;
	expect_equal(d orelse 1234, 1234)!;
	expect_equal(d!, .Null)!;
	d = 32;
	expect_equal(d!, 32)!;

	// Logical and, or, not
	// Short circuits.
	expect_equal(true and false, false)!;
	expect_equal(true or false, true)!;
	expect_equal(!true, false)!;

	// Comparison
	expect_equal(a == 1, true)!;
	expect_equal(d == 32, true)!;
	expect_equal(d != 32, false)!;
	expect_equal(a > 0, true)!;
	expect_equal(a >= 0, true)!;
	expect_equal(a < 1, false)!;
	expect_equal(a <= 1, true)!;

	// Array concatenation, fill
	const arr1 = u8[1, 2, 3];
	const arr2 = u8[4, 5, 6];
	expect_equal(arr1 + arr2, [1, 2, 3, 4, 5, 6])!;
	expect_equal(arr1 + u8[0] * 3, [1, 2, 3, 0, 0, 0])!;

	// Pointer ref and deref
	const e = &a;
	expect_equal(e.*, 1)!;
}
