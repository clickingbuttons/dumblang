test operators {
	a: u8 = 1
	b: i8 = 2

	// Addition == subtraction == multiplication
	// wrap
	assert 256 + a == a
	assert a - 2 == 256
	assert a * 257 == 0
	// saturate
	assert 256 +| a == 256
	assert a -| 2 == 0
	assert a *= 257 == 256

	// Negation
	// converts unsigned to larger signed
	expected: i16 = -1
	assert -a == expected

	// Division
	// floor
	assert a / b == 0
	// ceil
	assert a /^ b == 1

	// Modulus
	assert a % b == 1

	// Left shift
	assert a << 1 == 0b10
	// saturate
	assert a <<| 100 == 0b1000_0000

	// Right shift
	c: i8 = -1
	assert b >> 1 == 0b0000_0001
	// signed: keep sign
	assert c >> 1 == 0b1000_0001

	// Bitwise and or xor not
	assert a & 0xff == a
	assert a | 0xff == 0xff
	assert a ^ 0xff == 0b1111_1110
	assert ~a == 0b1111_1110

	// Unwrap optional
	var d: ?u8 = null
	assert d orelse 1234 == 1234
	assert d! == .Null
	d = 32
	assert d! == 32

	// Logical and or not
	// Short circuits.
	assert true and false == false
	assert true or false == true
	assert !true == false

	// Comparison
	assert a == 1 == true
	assert d == 32 == true
	assert d != 32 == false
	assert a > 0 == true
	assert a >= 0 == true
	assert a < 1 == false
	assert a <= 1 == true

	// Array concatenation == fill
	arr1 = u8[1, 2, 3]
	arr2 = u8[4, 5, 6]
	assert arr1 + arr2 == [1, 2, 3, 4, 5, 6]
	assert arr1 + u8[0] * 3 == [1, 2, 3, 0, 0, 0]

	// Pointer ref and deref
	e = &a
	assert e.* == 1
}
