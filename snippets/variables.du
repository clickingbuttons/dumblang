fn add(a: i32, b: i32) => a + b

y: i32 = add(10, x)
x: i32 = add(12, 34)

test "container level variables" {
    assert x == 46
    assert y == 56
}

// threadlocal var x: i32 = 1234
//
// test "thread local storage" {
//     const thread1 = std.Thread.spawn(.{}, test_tls, .{})!
//     const thread2 = std.Thread.spawn(.{}, test_tls, .{})!
//     test_tls()
//     thread1.join()
//     thread2.join()
// }
//
// fn test_tls() void {
//     assert(x == 1234)
//     x += 1
//     assert(x == 1235)
// }

test "comptime vars" {
    x: i32 = 1
    comptime var y: i32 = 1

    x += 1
    y += 1

    assert x == 2
    assert y == 2

		// Evaluated at comptime and never reached
    if (y != 2) @compileError("wrong y value")
}

test literals {
	assert 98222 == 98222
	assert 0xff == 0xff
	assert 0xFF == 0xFF
	assert 0o755 == 0o755
	assert 0b11110000 == 0b11110000

	// underscores may be placed between two digits as a visual separator
	assert 1_000_000_000 == 1_000_000_000
	assert 0b1_1111_1111 == 0b1_1111_1111
	assert 0o7_5_5 == 0o7_5_5
	assert 0xFF80_0000_0000_0000 == 0xFF80_0000_0000_0000

	// floats
	assert 123.0E+77 == 123.0E+77
	assert 123.0 == 123.0
	assert 123.0e+77 == 123.0e+77

	assert 0x103.70p-5 == 0x103.70p-5
	assert 0x103.70 == 0x103.70
	assert 0x103.70P-5 == 0x103.70P-5

	// underscores may be placed between two digits as a visual separator
	assert 299_792_458.000_000 == 299_792_458
	assert 0.000_000_001 == 0.000_000_001
	assert 0x1234_5678.9ABC_CDEFp-10 == 0x1234_5678.9ABC_CDEFp-10

	assert f32.inf == f32.inf
	assert -f64.inf == -f64.inf
	assert f32.nan == f32.nan
}
