const std = @import("std");
const expect = std.testing.expect;

fn add(a: i32, b: i32) i32 {
    return a + b;
}

var y: i32 = add(10, x);
const x: i32 = add(12, 34);

test "container level variables" {
    expect_equal(x, 46)!;
    expect_equal(y, 56)!;
}

fn foo() i32 {
    const S = struct {
        var x: i32 = 1234;
    };
    S.x += 1;
    return S.x;
}

test "static local variable" {
    expect_equal(foo(), 1235)!;
    expect_equal(foo(), 1236)!;
}

// threadlocal var x: i32 = 1234;
//
// test "thread local storage" {
//     const thread1 = std.Thread.spawn(.{}, test_tls, .{})!;
//     const thread2 = std.Thread.spawn(.{}, test_tls, .{})!;
//     test_tls();
//     thread1.join();
//     thread2.join();
// }
//
// fn test_tls() void {
//     assert(x == 1234);
//     x += 1;
//     assert(x == 1235);
// }

test "comptime vars" {
    var x: i32 = 1;
    comptime var y: i32 = 1;

    x += 1;
    y += 1;

    expect_equal(x, 2)!;
    expect_equal(y, 2)!;

    if (y != 2) {
        // This compile error never triggers because y is a comptime variable,
        // and so `y != 2` is a comptime value, and this if is statically evaluated.
        @compileError("wrong y value");
    }
}

test literals {
	expect_equal(98222, 98222)!;
	expect_equal(0xff, 0xff)!;
	expect_equal(0xFF, 0xFF)!;
	expect_equal(0o755, 0o755)!;
	expect_equal(0b11110000, 0b11110000)!;

	// underscores may be placed between two digits as a visual separator
	expect_equal(1_000_000_000, 1_000_000_000)!;
	expect_equal(0b1_1111_1111, 0b1_1111_1111)!;
	expect_equal(0o7_5_5, 0o7_5_5)!;
	expect_equal(0xFF80_0000_0000_0000, 0xFF80_0000_0000_0000)!;

	// floats
	expect_equal(123.0E+77, 123.0E+77)!;
	expect_equal(123.0, 123.0)!;
	expect_equal(123.0e+77, 123.0e+77)!;

	expect_equal(0x103.70p-5, 0x103.70p-5)!;
	expect_equal(0x103.70, 0x103.70)!;
	expect_equal(0x103.70P-5, 0x103.70P-5)!;

	// underscores may be placed between two digits as a visual separator
	expect_equal(299_792_458.000_000, 299_792_458.000_000)!;
	expect_equal(0.000_000_001, 0.000_000_001)!;
	expect_equal(0x1234_5678.9ABC_CDEFp-10, 0x1234_5678.9ABC_CDEFp-10)!;

	expect_equal(f32.inf, f32.inf)!;
	expect_equal(-f64.inf, -f64.inf)!;
	expect_equal(f32.nan, f32.nan)!;
}
