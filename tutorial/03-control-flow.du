// Control flow statements let you conditionally execute logic.

test "if statement" {
	// Block statements
	if 1 { assert 1 }
	if (1) { assert 1 }

	// Single statement
	if (1) assert 1

	// Optional
	a: ?u8 = 3
	if (a) assert a == 3

	// If statements are expressions. There are no ternaries.
	a = if (1) 42 else 0
	assert a == 42
}

test "for loop over range" {
	sum: u64 = 0

	// You MUST capture the value of ranges with `||`. If you want to discard
	// the capture, just use `|_|`.
	// The type of range variables is `usize`.
	for 0..5 |n: usize| sum += n * 2

	assert sum == 20
}

test "for loop over slice" {
	msg = "0123"
	for msg |c: u8, i: usize| assert c == msg[i]
}

test "traditional for loop" {
	sum: u64 = 0

	for (i: i16 = 0; i < 5; i += 1) sum += i * 2

	assert sum == 20

	sum = 0
	// There are no while loops. Just use `for`.
	for (;1) {
		sum += 1
		if (sum == 20) break;
	}

	assert sum == 20
}

test "switch over value" {
	a: u8 = 32
	switch(a) {
		1..100 => assert true
		0, 100..255 => assert false
	}
}

test "block function" {
	double(n: u8) u8 {
		return n * n;
	}
	assert double(2) == 4
}

test "arrow function" {
	double(n: u8) u8 => n * n

	assert double(2) == 4
}

test "variadic args function" {
	printf(...args) u16 {
		sum: u16 = 0
		for args |_| sum += 1
		return sum
	}

	assert printf(1, "2", 3.0) == u16(3)
}

test "defer" {
	a: u8 = 1
	defer {
		a = 2
		assert a == 2
	}

	assert a == 1
}

test "errors are values" {
	// TODO: better example (runtime input?)
	enum Error { broken }

	always_errors() i32!Error => Error.broken
	always_errors2() i32!Error => {
		always_errors()!
		assert false
	}

	test "catch" {
		always_errors() |e| assert e == Error.broken
		always_errors2() |e| assert e == Error.broken
	}
}
